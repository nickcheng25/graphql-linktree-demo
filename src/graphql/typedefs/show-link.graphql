interface ShowLinks {
    title: String! @constraint(maxLength: 144)
    link: String! @constraint(format: "uri")
    userId: String! @constraint(format: "uuid")
    dateCreated: DateTime!
    shows: [Show!]!
}

type ShowLink implements ShowLinks {
    title: String! @constraint(maxLength: 144)
    link: String! @constraint(format: "uri")
    userId: String! @constraint(format: "uuid")
    dateCreated: DateTime!
    """  
    a show is an object containing its sale status, and a redirect link to the vendor
     """
    shows: [Show!]!
}

type Show {
    status: Status! # @todo, I don't want the client to have to write business logic here to determine what and how to render, we could handle the logic and create a boolean isOnSale here
    saleLink: String! @constraint(format: "uri")
}

input ShowLinkInput {
    title: String @constraint(maxLength: 144) #@todo title is not compulsory, we could probably autopopulate this
    link: String! @constraint(format: "uri")
    userId: String! @constraint(format: "uuid")
    shows: [ShowInput!]!
}

input ShowInput {
    status: Status!
    saleLink: String! @constraint(format: "uri")
}

enum Status {
  SOLD_OUT
  NOT_YET_ON_SALE
  ON_SALE
}

input UpdateShowLinkInput {
    id: ID!
    title: String @constraint(maxLength: 144)
    link: String @constraint(format: "uri")
    shows: [ShowInput!]
}